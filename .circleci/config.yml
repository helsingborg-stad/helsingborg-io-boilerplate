# Helsingborg Stad CircleCI Build Config
#
# Supported Build process: Dockerized NodeJS Apps deployed on Heroku
#
# -- TESTS --
#
# This build config will make a basic warmup of the docker. It's up
# to the application itself to run the required tests to validate
# the functionality. This build will fail if any error message is thrown.
#
# -- SETUP --
# You need to get the following steps done before this build will complete.
#
# 1. Create a git repository.
# 2. Link the git repository to circle ci
# 4. Create a heroku container repository
# 5. Run the build
#
# More detailed information on how to complete this and enviroment
# variables can be found in internal confluence documentation.
#
# -- AUTHORS --
#
# Sebastian Thulin (sebastian.thulin@helsingborg.se)
#
version: 2.1
executors:
  docker-publisher:
    docker:
      - image: circleci/buildpack-deps:stretch

jobs:

  lint:
    working_directory: ~/application
    docker:
      - image: circleci/node:12.3.1
    steps:
      - run:
          command: |
            mkdir -p ~/reports
            eslint ./src/ --format junit --output-file ~/reports/eslint.xml
          when: always
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports

  node:
    working_directory: ~/application
    docker:
      - image: circleci/node:12.3.1
    steps:
      # Check out the code in the project directory.
      - checkout

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: 
          name: Install depencencys
          command: npm install

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
      - run:
          name: Run application tests
          command: |
            mkdir -p test-results/node
            npm run test

      # Persist temporary files (stored up to 30 days).
      - persist_to_workspace:
          root: ~/application
          paths:
            - node_modules

      # Store logs.
      - store_test_results:
          path: test-results

      # Store artifacts (example logs, binaries, etc).
      - store_artifacts:
          path: test-results

  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Build Docker image
          command: |
            docker build -t $CIRCLE_PROJECT_REPONAME:latest .

      - run:
          name: Archive Docker image
          command: docker save -o image.tar $CIRCLE_PROJECT_REPONAME

      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  set_pkg_number_release:
    working_directory: ~/application
    docker:
      - image: circleci/node:12.3.1

    steps:
      # Add SSH key used for pushing code to GIT repo.
      - add_ssh_keys:
          fingerprints:
            - "ba:5d:03:0c:2a:20:18:be:16:bc:76:cf:eb:5f:e3:3a"

      - checkout

      - run:
          name: Bump package version [release]
          command: |
            git config user.name "CircleCI bot"
            git config user.email "circleci@circleci"
            npm version minor -m "Bumped version number to %s [ci skip]"
            git push origin master
            git push --tags

  set_pkg_number_beta:
    working_directory: ~/application
    docker:
      - image: circleci/node:12.3.1

    steps:
      # Add SSH key used for pushing code to GIT repo.
      - add_ssh_keys:
          fingerprints:
            - "ba:5d:03:0c:2a:20:18:be:16:bc:76:cf:eb:5f:e3:3a"

      - checkout

      - run:
          name: Bump package version [beta]
          command: |
            git config user.name "CircleCI bot"
            git config user.email "circleci@circleci"
            npm version prerelease --preid=beta -m "Bumped version number to %s [ci skip]"
            git push origin HEAD:develop
            git push --tags

workflows:
  version: 2
  build-master:
    jobs:
      - build:
          filters:
            branches:
              only: 
                - master
                - develop
                - deploy/test/build
      - node:
          filters:
            branches:
              only:
                - master
                - develop 
                - /feature.*/
                - deploy/test/node
      - lint:
          filters:
            branches:
              only:
                - master
                - develop 
                - /feature.*/
                - deploy/test/lint
      - set_pkg_number_release:
          filters:
            branches:
              only:
                - master
                - deploy/test/release
      - set_pkg_number_beta:
          filters:
            branches:
              only:
                - develop
                - deploy/test/beta